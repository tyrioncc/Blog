<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.yuitycc</groupId>
    <artifactId>blog</artifactId>
    <packaging>jar</packaging>
    <version>0.0.1-SNAPSHOT</version>

    <name>Yui_tycc的博客</name>

    <properties>
        <spring-boot.version>2.0.1.RELEASE</spring-boot.version>
        <!--jooq.version>3.10.6</jooq.version-->
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.1.RELEASE</version>
    </parent>

    <dependencies>
        <!-- spring boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- jooq -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
            </plugin>

            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>3.10.6</version>

                <!-- The plugin should hook into the generate goal -->
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <!-- Manage the plugin's dependency. -->
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>${mysql.version}</version>
                    </dependency>
                </dependencies>
                <!-- Specify the plugin configuration.
                 The configuration format is the same as for the standalone code generator -->
                <configuration>
                    <!-- JDBC connection parameters -->
                    <jdbc>
                        <driver>com.mysql.jdbc.Driver</driver>
                        <url>jdbc:mysql://localhost:3306/blogDB</url>
                        <user>root</user>
                        <password>Root</password>
                    </jdbc>
                    <generator>
                        <database>
                            <!-- The database type. The format here is:
                                 org.util.[database].[database]Database -->
                            <name>org.jooq.util.mysql.MySQLDatabase</name>

                            <!-- The database schema (or in the absence of schema support, in your RDBMS this
                                 can be the owner, user, database name) to be generated -->
                            <inputSchema>blogdb</inputSchema>

                            <!-- All elements that are generated from your schema
                                 (A Java regular expression. Use the pipe to separate several expressions)
                                 Watch out for case-sensitivity. Depending on your database, this might be important! -->
                            <includes>.*</includes>

                            <!-- All elements that are excluded from your schema
                                 (A Java regular expression. Use the pipe to separate several expressions).
                                 Excludes match before includes, i.e. excludes have a higher priority -->
                            <excludes></excludes>
                        </database>
                        <target>
                            <packageName>org.jooq.example.db.mysql</packageName>
                            <directory>target/generated-sources/jooq</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>